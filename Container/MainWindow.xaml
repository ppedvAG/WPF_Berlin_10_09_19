<Window x:Class="Container.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Container"
        mc:Ignorable="d"
        Title="MainWindow" Height="654.477" Width="462.734">
    <!--In WPF können verschiedene Container mit unterschiedlichem Verhalten zum Layouting verwendet werden, um Controls anzuordnen-->
    <ScrollViewer HorizontalScrollBarVisibility="Auto"
                  VerticalScrollBarVisibility="Auto">
        <!--Der ScrollViewer zweigt automatisch eine ScrollBar an, wenn der Content des ScrollViewers im Fenster nicht mehr vollständig
        sichtbar ist-->
        <StackPanel>
            <Canvas Height="200">
                <!--Ein Canvas bietet seinem Content absolute Positions-Koordinaten an, an welchem die Objekte festgemacht werden-->
                <!--Über die AttachedProperties Canvas.Left und Canvas.Top (Props des Canvas, welche sich aber auf die Content-Elemente beziehen)
                kann die Position der Elemenete im Canvas definiert werden-->
                <Rectangle Fill="Blue" Height="50" Width="50"
                       Canvas.Left="100"
                       Canvas.Top="100"/>
                <Rectangle Fill="Green" Height="50" Width="50"
                       Canvas.Left="110"
                       Canvas.Top="110"
                       Panel.ZIndex="-1"/>
                <Button Content="Hallo"
                    Canvas.Left="10"
                    Canvas.Top="20"/>

            </Canvas>

            <StackPanel Orientation="Horizontal">
                <!--StackPanels 'stapeln' die beinhaltenden Elemente je nach Orientierung, wobei sie in dieser Richtung den Elementen eine minimale
                Ausdehnung gestatten, in der anderen Richtung aber eine Maximale-->
                <Button Content="Ciao"/>
                <Button Content="Ciao"/>
                <Button Content="Ciao"/>
                <Button Content="Ciao"/>
                <Button Content="Ciao"/>
            </StackPanel>

            <WrapPanel>
                <!--WrapPanels agieren ähnlich wie StackPanels, verschieben jedoch die Elemente, wenn diese in einem Fenster nicht mehr sichtbar sind-->
                <Button Content="Ciao" Width="50"/>
                <Button Content="Ciao" Width="50"/>
                <Button Content="Ciao" Width="50"/>
                <Button Content="Ciao" Width="50"/>
                <Button Content="Ciao" Width="50"/>
            </WrapPanel>

            <DockPanel Height="200"
                   LastChildFill="False">
                <!--In DockPanels können Elemente über die AttachedProperty DockPanel.Dock einer Seite zugewiesen werden.
                Nicht zugewiesene Elemente teilen sich den verbleibenden Platz. Die Ausrichtung der Elemente orientiert
                sich zudem an der Zuweisungsreihenfolge.
                Die LastChildFill-Eigenschaft gibt an, ob die nicht zugeordneten Elemente den verbleibenden Platz komplett
                ausfüllen sollen oder nicht.-->
                <Button Content="Ciao"
                    DockPanel.Dock="Top"/>
                <Button Content="Ciao"
                    DockPanel.Dock="Bottom"/>
                <Button Content="Ciao"
                    DockPanel.Dock="Left"/>
                <Button Content="Ciao"
                    DockPanel.Dock="Right"/>
                <Button Content="Ciao"/>
                <Button Content="Ciao"/>
                <Button Content="Ciao"/>
            </DockPanel>

            <Border BorderBrush="Green" BorderThickness="2">
                <!--Border sind grafische Elemente mit einer Content-Eigenschaft-->
                <Grid>
                    <!--In Grids müssen Spalten und Zeilen zunächst definiert werden, bevor den Elementen über Grid.Row
                    und Grid.Column eine Zelle zugeordnet wird.-->
                    <Grid.ColumnDefinitions>
                        <!--In den GridDefinitions können Spalten und Zeilen Breite/Höhe zugewiesen werden.
                        Auto    = Minimaler Platz des gröten Elements der jeweiligen Spalte/Zeile
                        *       = verbleibender Platz-->
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <Button Content="Hallo" Grid.Column="0" Grid.Row="0"/>
                    <Button Content="Hallo" Grid.Column="1" Grid.Row="1"/>
                    <Button Content="Hallo" Grid.Column="2" Grid.Row="0" Grid.ColumnSpan="2"/>
                    <Button Content="Hallo" Grid.Column="2" Grid.Row="1"/>
                </Grid>
            </Border>

            <UniformGrid Columns="3" Rows="2">
                <!--In UniformGrids kann man nur die Anzahl der Spalten und Zeilen angeben. Die Zuordnung der Elemente
                zu den Zellen erfolgt durch die Reihenfolge der Elementdeklaration in Xaml. Eine Angabe von Spalten- und Zeilen-
                größe ist nicht möglich.-->
                <Button Content="Hallo"/>
                <Button Content="Hallo"/>
                <Button Content="Hallo"/>
                <Button Content="Hallo"/>
                <Button Content="Hallo"/>
                <Button Content="Hallo"/>
            </UniformGrid>

            <Viewbox Stretch="Fill">
                <!--ViewBoxen bieten wie Images die Stretch-Property an, wodurch die Präsentation des Inhakts manipuliert werden kann-->
                <Button Content="Moin"/>
            </Viewbox>


        </StackPanel>
    </ScrollViewer>
</Window>
